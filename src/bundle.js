/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, { enumerable: true, get: getter });
/******/ 		}
/******/ 	};
/******/
/******/ 	// define __esModule on exports
/******/ 	__webpack_require__.r = function(exports) {
/******/ 		if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 			Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 		}
/******/ 		Object.defineProperty(exports, '__esModule', { value: true });
/******/ 	};
/******/
/******/ 	// create a fake namespace object
/******/ 	// mode & 1: value is a module id, require it
/******/ 	// mode & 2: merge all properties of value into the ns
/******/ 	// mode & 4: return value when already ns object
/******/ 	// mode & 8|1: behave like require
/******/ 	__webpack_require__.t = function(value, mode) {
/******/ 		if(mode & 1) value = __webpack_require__(value);
/******/ 		if(mode & 8) return value;
/******/ 		if((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;
/******/ 		var ns = Object.create(null);
/******/ 		__webpack_require__.r(ns);
/******/ 		Object.defineProperty(ns, 'default', { enumerable: true, value: value });
/******/ 		if(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));
/******/ 		return ns;
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = "./src/index.js");
/******/ })
/************************************************************************/
/******/ ({

/***/ "./src/enemy.js":
/*!**********************!*\
  !*** ./src/enemy.js ***!
  \**********************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("const MovingObject = __webpack_require__(/*! ./moving_object */ \"./src/moving_object.js\");\n\nclass Enemy extends MovingObject {\n    constructor(options) {\n        options.pos = options.pos;\n        options.vel = options.vel;\n        options.radius = options.radius;\n        options.color = options.color;\n        super(options);\n    }\n}\n\nmodule.exports = Enemy;\n\n//# sourceURL=webpack:///./src/enemy.js?");

/***/ }),

/***/ "./src/enemy_circle.js":
/*!*****************************!*\
  !*** ./src/enemy_circle.js ***!
  \*****************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("const Enemy = __webpack_require__(/*! ./enemy */ \"./src/enemy.js\");\nconst Util = __webpack_require__(/*! ./util */ \"./src/util.js\");\n\nclass EnemyCircle extends Enemy {\n    constructor(options) {\n        options.pos = [options.game.randomPositionX(), options.game.randomPositionY()];\n        options.vel = Util.entranceVelocity(options.pos[0]);\n        options.radius = 20;\n        options.color = \"#f45942\";\n        super(options);\n    }\n\n    draw(ctx) {\n        ctx.fillStyle = \"#000000\";\n        ctx.strokeStyle = this.color;\n        ctx.lineWidth = 5;\n        ctx.shadowColor = this.color;\n        ctx.shadowBlur = 30;\n        ctx.shadowOffsetX = 0;\n        ctx.shadowOffsetY = 0;\n        ctx.beginPath();\n        ctx.arc(this.pos[0], this.pos[1], this.radius, 0, 2 * Math.PI, true);\n        ctx.stroke();\n        ctx.fill();\n        ctx.closePath();\n    }\n}\n\nmodule.exports = EnemyCircle;\n\n//# sourceURL=webpack:///./src/enemy_circle.js?");

/***/ }),

/***/ "./src/enemy_line.js":
/*!***************************!*\
  !*** ./src/enemy_line.js ***!
  \***************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("const Enemy = __webpack_require__(/*! ./enemy */ \"./src/enemy.js\");\nconst Util = __webpack_require__(/*! ./util */ \"./src/util.js\");\n\nclass EnemyLine extends Enemy {\n    constructor(options) {\n        options.pos = [options.game.randomPositionX(), options.game.randomPositionY()];\n        options.vel = Util.entranceVelocity(options.pos[0]);\n        options.width = 80;\n        options.length = 10;\n        options.color = \"#a442f4\";\n        super(options);\n    }\n\n    draw(ctx) {\n        ctx.fillStyle = \"#000000\";\n        ctx.strokeStyle = this.color;\n        ctx.lineWidth = 5;\n        ctx.shadowColor = this.color;\n        ctx.shadowBlur = 30;\n        ctx.shadowOffsetX = 0;\n        ctx.shadowOffsetY = 0;\n        ctx.beginPath();\n        ctx.strokeRect(this.pos[0] - (this.width / 2), this.pos[1] - (this.length / 2), this.width, this.length);\n        ctx.fillRect(this.pos[0] - (this.width / 2), this.pos[1] - (this.length / 2), this.width, this.length);\n        ctx.moveTo(-(this.width / 2), -(this.length / 2));\n        ctx.stroke();\n        ctx.fill();\n        ctx.closePath();\n    }\n}\n\nmodule.exports = EnemyLine;\n\n//# sourceURL=webpack:///./src/enemy_line.js?");

/***/ }),

/***/ "./src/enemy_rectangle_horizontal.js":
/*!*******************************************!*\
  !*** ./src/enemy_rectangle_horizontal.js ***!
  \*******************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("const Enemy = __webpack_require__(/*! ./enemy */ \"./src/enemy.js\");\nconst Util = __webpack_require__(/*! ./util */ \"./src/util.js\");\n\nclass EnemyRectangleHorizontal extends Enemy {\n    constructor(options) {\n        options.pos = [options.game.randomPositionX(), options.game.randomPositionY()];\n        options.vel = Util.entranceVelocity(options.pos[0]);\n        options.width = 60;\n        options.length = 30;\n        options.color = \"#f9e43e\";\n        super(options);\n    }\n\n    draw(ctx) {\n        ctx.fillStyle = \"#000000\";\n        ctx.strokeStyle = this.color;\n        ctx.lineWidth = 5;\n        ctx.shadowColor = this.color;\n        ctx.shadowBlur = 30;\n        ctx.shadowOffsetX = 0;\n        ctx.shadowOffsetY = 0;\n        ctx.beginPath();\n        ctx.strokeRect(this.pos[0] - (this.width / 2), this.pos[1] - (this.length / 2), this.width, this.length);\n        ctx.fillRect(this.pos[0] - (this.width / 2), this.pos[1] - (this.length / 2), this.width, this.length);\n        ctx.moveTo(-(this.width / 2), -(this.length / 2));\n        ctx.stroke();\n        ctx.fill();\n        ctx.closePath();\n    }\n}\n\nmodule.exports = EnemyRectangleHorizontal;\n\n//# sourceURL=webpack:///./src/enemy_rectangle_horizontal.js?");

/***/ }),

/***/ "./src/enemy_rectangle_vertical.js":
/*!*****************************************!*\
  !*** ./src/enemy_rectangle_vertical.js ***!
  \*****************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("const Enemy = __webpack_require__(/*! ./enemy */ \"./src/enemy.js\");\nconst Util = __webpack_require__(/*! ./util */ \"./src/util.js\");\n\nclass EnemyRectangleVertical extends Enemy {\n    constructor(options) {\n        options.pos = [options.game.randomPositionX(), options.game.randomPositionY()];\n        options.vel = Util.entranceVelocity(options.pos[0]);\n        options.width = 30;\n        options.length = 60;\n        options.color = \"#fca420\";\n        super(options);\n    }\n\n    draw(ctx) {\n        ctx.fillStyle = \"#000000\";\n        ctx.strokeStyle = this.color;\n        ctx.lineWidth = 5;\n        ctx.shadowColor = this.color;\n        ctx.shadowBlur = 30;\n        ctx.shadowOffsetX = 0;\n        ctx.shadowOffsetY = 0;\n        ctx.beginPath();\n        ctx.strokeRect(this.pos[0] - (this.width / 2), this.pos[1] - (this.length / 2), this.width, this.length);\n        ctx.fillRect(this.pos[0] - (this.width / 2), this.pos[1] - (this.length / 2), this.width, this.length);\n        ctx.moveTo(-(this.width / 2), -(this.length / 2));\n        ctx.stroke();\n        ctx.fill();\n        ctx.closePath();\n    }\n}\n\nmodule.exports = EnemyRectangleVertical;\n\n//# sourceURL=webpack:///./src/enemy_rectangle_vertical.js?");

/***/ }),

/***/ "./src/enemy_square.js":
/*!*****************************!*\
  !*** ./src/enemy_square.js ***!
  \*****************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("const Enemy = __webpack_require__(/*! ./enemy */ \"./src/enemy.js\");\nconst Util = __webpack_require__(/*! ./util */ \"./src/util.js\");\n\nclass EnemySquare extends Enemy {\n    constructor(options) {\n        options.pos = [options.game.randomPositionX(), options.game.randomPositionY()];\n        options.vel = Util.entranceVelocity(options.pos[0]);\n        options.width = 30;\n        options.length = 30;\n        options.color = \"#f442e8\";\n        super(options);\n    }\n\n    draw(ctx) {\n        ctx.fillStyle = \"#000000\";\n        ctx.strokeStyle = this.color;\n        ctx.lineWidth = 5;\n        ctx.shadowColor = this.color;\n        ctx.shadowBlur = 30;\n        ctx.shadowOffsetX = 0;\n        ctx.shadowOffsetY = 0;\n        ctx.beginPath();\n        ctx.strokeRect(this.pos[0] - (this.width / 2), this.pos[1] - (this.length / 2), this.width, this.length);\n        ctx.fillRect(this.pos[0] - (this.width / 2), this.pos[1] - (this.length / 2), this.width, this.length);\n        ctx.moveTo(-(this.width / 2), -(this.length / 2));\n        ctx.stroke();\n        ctx.fill();\n        ctx.closePath();\n    }\n}\n\nmodule.exports = EnemySquare;\n\n//# sourceURL=webpack:///./src/enemy_square.js?");

/***/ }),

/***/ "./src/game.js":
/*!*********************!*\
  !*** ./src/game.js ***!
  \*********************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("const Player = __webpack_require__(/*! ./player */ \"./src/player.js\");\nconst Enemy = __webpack_require__(/*! ./enemy */ \"./src/enemy.js\");\nconst EnemyCircle = __webpack_require__(/*! ./enemy_circle */ \"./src/enemy_circle.js\");\nconst EnemyLine = __webpack_require__(/*! ./enemy_line */ \"./src/enemy_line.js\");\nconst EnemyRectangleHorizontal = __webpack_require__(/*! ./enemy_rectangle_horizontal */ \"./src/enemy_rectangle_horizontal.js\");\nconst EnemyRectangleVertical = __webpack_require__(/*! ./enemy_rectangle_vertical */ \"./src/enemy_rectangle_vertical.js\");\nconst EnemySquare = __webpack_require__(/*! ./enemy_square */ \"./src/enemy_square.js\");\nconst Notification = __webpack_require__(/*! ./notification */ \"./src/notification.js\");\nconst Powerup = __webpack_require__(/*! ./powerup */ \"./src/powerup.js\");\nconst PowerupBulletTime = __webpack_require__(/*! ./powerup_bullet_time */ \"./src/powerup_bullet_time.js\");\nconst PowerupInvincibility = __webpack_require__(/*! ./powerup_invincibility */ \"./src/powerup_invincibility.js\");\nconst PowerupPlusScore = __webpack_require__(/*! ./powerup_plus_score */ \"./src/powerup_plus_score.js\");\nconst PowerupWipeout = __webpack_require__(/*! ./powerup_wipeout */ \"./src/powerup_wipeout.js\");\nconst Particle = __webpack_require__(/*! ./particle */ \"./src/particle.js\");\n\nclass Game {\n    constructor(npcSpeedMultiplierBool, angledEnemySpawnsBool, playerSpeedMultiplierBool, enemySpawnFrequencyMultiplierBool, enemySpeedRandomBool) {\n        this.playing = true;\n        this.enemies = [];\n        this.powerups = [];\n        this.player = [];\n        this.particles = [];\n        this.notifications = [];\n        this.score = 0;\n        this.ripple = 0;\n        this.highScoreSet = false;\n\n        this.npcSpeedMultiplier = 1;\n        this.npcSpeedMultiplier2 = 1;\n        this.angledEnemySpawns = false;\n        this.playerSpeedMultiplier = 1;\n        this.enemySpawnFrequencyMultiplier = 1;\n        this.enemySpeedRandom = false;\n\n        this.totalScoreMultiplier = 1;\n\n        if (npcSpeedMultiplierBool === true) {\n            this.npcSpeedMultiplier = 1.5;\n            this.totalScoreMultiplier *= 1.5;\n        }\n        \n        if (angledEnemySpawnsBool === true) {\n            this.angledEnemySpawns = true;\n            this.totalScoreMultiplier *= 2;\n        }\n        \n        if (playerSpeedMultiplierBool === true) {\n            this.playerSpeedMultiplier = 0.75;\n            this.totalScoreMultiplier *= 1.2;\n        }\n\n        if (enemySpawnFrequencyMultiplierBool === true) {\n            this.enemySpawnFrequencyMultiplier = 1.25;\n            this.totalScoreMultiplier *= 1.5;\n        }\n\n        if (enemySpeedRandomBool === true) {\n            this.enemySpeedRandom = true;\n            this.totalScoreMultiplier *= 1.5;\n        }\n\n        this.addNPCs();\n    }\n\n    add(object) {\n        if (object instanceof Enemy) {\n            this.enemies.push(object);\n        } else if (object instanceof Powerup) {\n            this.powerups.push(object);\n        } else if (object instanceof Player) {\n            this.player.push(object);\n        } else {\n            throw new Error(\"unknown object type\");\n        }\n    }\n\n    addEnemyCircle() {\n        this.add(new EnemyCircle({ game: this }));\n    }\n\n    addEnemyLine() {\n        this.add(new EnemyLine({ game: this }));\n    }\n\n    addEnemyRectangleHorizontal() {\n        this.add(new EnemyRectangleHorizontal({ game: this }));\n    }\n\n    addEnemyRectangleVertical() {\n        this.add(new EnemyRectangleVertical({ game: this }));\n    }\n\n    addEnemySquare() {\n        this.add(new EnemySquare({ game: this }));\n    }\n\n    addNPCs() {\n        setInterval( () => {\n            if (Math.random() > 0.10) {\n                this.addEnemyCircle();\n            }\n        }, ((2 * 720) / this.enemySpawnFrequencyMultiplier));\n\n        setInterval(() => {\n            if (Math.random() > 0.35) {\n                this.addEnemyLine();\n            }\n        }, ((3 * 735) / this.enemySpawnFrequencyMultiplier));\n\n        setInterval(() => {\n            if (Math.random() > 0.15) {\n                this.addEnemyRectangleHorizontal();\n            }\n        }, ((4 * 615) / this.enemySpawnFrequencyMultiplier));\n\n        setInterval(() => {\n            if (Math.random() > 0.20) {\n                this.addEnemyRectangleVertical();\n            }\n        }, ((5 * 565) / this.enemySpawnFrequencyMultiplier));\n\n        setInterval(() => {\n            if (Math.random() > 0.20) {\n                this.addEnemySquare();\n            }\n        }, ((3 * 395) / this.enemySpawnFrequencyMultiplier));\n\n        setInterval(() => {\n            if (Math.random() > 0.65) {\n                this.addPowerupBulletTime();\n            }\n        }, 17 * 510);\n\n        setInterval( () => {\n            if (Math.random() > 0.5) {\n                this.addPowerupPlusScore();\n            }\n        }, 11 * 615);\n\n        setInterval(() => {\n            if (Math.random() > 0.70) {\n                this.addPowerupInvincibility();\n            }\n        }, 18 * 558);\n\n        setInterval(() => {\n            if (Math.random() > 0.30) {\n                this.addPowerupWipeout();\n            }\n        }, 22 * 565);\n\n    }\n\n    addPlayer() {\n        const player = new Player({game: this});\n        this.add(player);\n        this.player[0].growPlayer();\n        return player;\n    }\n\n    addPowerupBulletTime() {\n        this.add(new PowerupBulletTime({ game: this }));\n    }\n\n    addPowerupInvincibility() {\n        this.add(new PowerupInvincibility({ game: this }));\n    }\n\n    addPowerupPlusScore() {\n        this.add(new PowerupPlusScore({ game: this }));\n    }\n\n    addPowerupWipeout() {\n        this.add(new PowerupWipeout({ game: this }));\n    }\n\n    allNPCs() {\n        return [].concat(this.enemies, this.powerups, this.particles);\n    }\n\n    allObjects() {\n        return [].concat(this.player, this.enemies, this.powerups, this.particles, this.notifications);\n    }\n\n    checkCollisions() {\n        if (this.player.length !== 0) {\n            const player = this.player[0];\n            const allNPCs = this.allNPCs();\n            for (let i = 0; i < allNPCs.length; i++) {\n                const npc = allNPCs[i];\n                if (player.isCollidedWith(npc)) {\n                    const collision = player.collideWith(npc);\n                    if (collision) return;\n                }\n            }\n        }\n    }\n\n    checkNearMisses() {\n        if (this.player.length !== 0) {\n            const player = this.player[0];\n            const allNPCs = this.allNPCs();\n            for (let i = 0; i < allNPCs.length; i++) {\n                const npc = allNPCs[i];\n                if (player.hasNearlyMissed(npc)) {\n                    const nearMiss = player.nearlyMiss(npc);\n                    if (nearMiss) return;\n                }\n            }\n        }\n    }\n\n    checkRadius() {\n        if (this.player[0].radius === 27) {\n            this.player[0].explode();\n            this.player[0].remove();\n            setTimeout(() => {\n                this.playing = false;\n                this.updateHighScores(this.score);\n            }, 1500);\n        }\n    }\n\n    draw(ctx) {\n        if (this.playing === true) {\n            ctx.clearRect(0, 0, Game.DIM_X, Game.DIM_Y);\n            ctx.fillStyle = Game.BG_COLOR;\n            ctx.shadowColor = this.color;\n            ctx.shadowBlur = 0;\n            ctx.shadowOffsetX = 0;\n            ctx.shadowOffsetY = 0;\n            ctx.beginPath();\n            ctx.fillRect(0, 0, Game.DIM_X, Game.DIM_Y);\n            ctx.fillStyle = Game.SAFE_ZONE_COLOR;\n            ctx.shadowColor = Game.SAFE_ZONE_COLOR;\n            ctx.shadowBlur = 20;\n            ctx.shadowOffsetX = 0;\n            ctx.shadowOffsetY = 0;\n            ctx.fillRect((Game.DIM_X * 0.49), 0, (Game.DIM_X * 0.02), (Game.DIM_Y * 0.05));\n            ctx.fillRect((Game.DIM_X * 0.49), (Game.DIM_Y * 0.95), (Game.DIM_X * 0.02), (Game.DIM_Y * 0.05));\n            ctx.font = \"160px Saira Semi Condensed\";\n            ctx.fillStyle = \"rgba(204, 204, 204, 0.2)\";\n            ctx.textAlign = \"center\";\n            ctx.textBaseline = \"middle\";\n            ctx.fillText(`${Math.ceil(this.score)}`, 500, 320);\n            ctx.font = \"30px Saira Semi Condensed\";\n            ctx.fillStyle = \"rgba(204, 204, 204, 0.2)\";\n            ctx.textAlign = \"left\";\n            ctx.textBaseline = \"middle\";\n            ctx.fillText(`Score Multiplier: x ${parseFloat(this.totalScoreMultiplier).toFixed(2)}`, 10, 580);\n            ctx.closePath();\n\n            this.allObjects().forEach( object => {\n                object.draw(ctx);\n            });\n\n            this.drawScoreRipple(ctx);\n        } else {\n            ctx.clearRect(0, 0, Game.DIM_X, Game.DIM_Y);\n            ctx.fillStyle = Game.BG_COLOR;\n            ctx.fillRect(0, 0, Game.DIM_X, Game.DIM_Y);\n            ctx.font = \"160px Saira Semi Condensed\";\n            ctx.fillStyle = \"rgba(204, 204, 204, 0.2)\";\n            ctx.textAlign = \"center\";\n            ctx.textBaseline = \"middle\";\n            ctx.fillText(\"GAME OVER\", 500, 320);\n        }\n    }\n\n    drawScoreRipple(ctx) {\n        ctx.lineWidth = 8;\n        if (this.ripple === 10) {\n            ctx.beginPath();\n            ctx.strokeStyle = \"rgba(204, 204, 204, 0.5)\";\n            ctx.arc(500, 300, 200, 0, 2 * Math.PI, true);\n            ctx.stroke();\n            ctx.closePath();\n            setTimeout(() => {\n                this.ripple = 9;\n            }, 50);\n        }\n        if (this.ripple === 9) {\n            ctx.beginPath();\n            ctx.strokeStyle = \"rgba(204, 204, 204, 0.45)\";\n            ctx.arc(500, 300, 180, 0, 2 * Math.PI, true);\n            ctx.stroke();\n            ctx.closePath();\n            setTimeout(() => {\n                this.ripple = 8;\n            }, 50);\n        }\n        if (this.ripple === 8) {\n            ctx.beginPath();\n            ctx.strokeStyle = \"rgba(204, 204, 204, 0.40)\";\n            ctx.arc(500, 300, 160, 0, 2 * Math.PI, true);\n            ctx.stroke();\n            ctx.closePath();\n            setTimeout(() => {\n                this.ripple = 7;\n            }, 50);\n        }\n        if (this.ripple === 7) {\n            ctx.beginPath();\n            ctx.strokeStyle = \"rgba(204, 204, 204, 0.35)\";\n            ctx.arc(500, 300, 140, 0, 2 * Math.PI, true);\n            ctx.stroke();\n            ctx.closePath();\n            setTimeout(() => {\n                this.ripple = 6;\n            }, 50);\n        }\n        if (this.ripple === 6) {\n            ctx.beginPath();\n            ctx.strokeStyle = \"rgba(204, 204, 204, 0.30)\";\n            ctx.arc(500, 300, 120, 0, 2 * Math.PI, true);\n            ctx.stroke();\n            ctx.closePath();\n            setTimeout(() => {\n                this.ripple = 5;\n            }, 50);\n        }\n        if (this.ripple === 5) {\n            ctx.beginPath();\n            ctx.strokeStyle = \"rgba(204, 204, 204, 0.25)\";\n            ctx.arc(500, 300, 100, 0, 2 * Math.PI, true);\n            ctx.stroke();\n            ctx.closePath();\n            setTimeout(() => {\n                this.ripple = 4;\n            }, 50);\n        }\n        if (this.ripple === 4) {\n            ctx.beginPath();\n            ctx.strokeStyle = \"rgba(204, 204, 204, 0.20)\";\n            ctx.arc(500, 300, 80, 0, 2 * Math.PI, true);\n            ctx.stroke();\n            ctx.closePath();\n            setTimeout(() => {\n                this.ripple = 3;\n            }, 50);\n        }\n        if (this.ripple === 3) {\n            ctx.beginPath();\n            ctx.strokeStyle = \"rgba(204, 204, 204, 0.15)\";\n            ctx.arc(500, 300, 60, 0, 2 * Math.PI, true);\n            ctx.stroke();\n            ctx.closePath();\n            setTimeout(() => {\n                this.ripple = 2;\n            }, 50);\n        }\n        if (this.ripple === 2) {\n            ctx.beginPath();\n            ctx.strokeStyle = \"rgba(204, 204, 204, 0.10)\";\n            ctx.arc(500, 300, 40, 0, 2 * Math.PI, true);\n            ctx.stroke();\n            ctx.closePath();\n            setTimeout(() => {\n                this.ripple = 1;\n            }, 50);\n        }\n        if (this.ripple === 1) {\n            ctx.beginPath();\n            ctx.strokeStyle = \"rgba(204, 204, 204, 0.05)\";\n            ctx.arc(500, 300, 20, 0, 2 * Math.PI, true);\n            ctx.stroke();\n            ctx.closePath();\n            setTimeout(() => {\n                this.ripple = 0;\n            }, 50);\n        }\n    }\n\n    explode(object) {\n        for (let i = 0; i < 25; i++) {\n            let posNeg = [1, -1];\n            let directionX = posNeg[Math.floor(Math.random() * posNeg.length)];\n            let directionY = posNeg[Math.floor(Math.random() * posNeg.length)];\n            let vx = directionX * ((Math.random() * 60) - 30);\n            let vy = directionY * ((Math.random() * 60) - 30);\n            this.particles.push(new Particle({\n                pos: object.pos,\n                vel: [vx, vy],\n                color: object.color,\n                game: this,\n            }));\n        }\n        setTimeout(() => {\n            this.particles = [];\n        }, 750);\n        if (object instanceof PowerupPlusScore) {\n            this.notifications.push(new Notification({\n                message: `Score +${parseFloat(20 * this.totalScoreMultiplier).toFixed(0)}`,\n                pos: object.pos,\n                game: this,\n            }));\n            setTimeout( () => {\n                this.notifications = [];\n            }, 1000);\n        }\n        if (object instanceof PowerupInvincibility) {\n            this.notifications.push(new Notification({\n                message: \"INVINCIBLE\",\n                pos: object.pos,\n                game: this,\n            }));\n            setTimeout(() => {\n                this.notifications = [];\n            }, 750);\n        }\n        if (object instanceof Enemy && this.player.length === 1) {\n            this.notifications.push(new Notification({\n                message: `Score +${parseFloat(10 * this.totalScoreMultiplier).toFixed(0)}`,\n                pos: object.pos,\n                game: this,\n            }));\n            setTimeout(() => {\n                this.notifications = [];\n            }, 750);\n        }\n    }\n\n    isOutOfBounds(pos) {\n        return (pos[0] < 0) || (pos[0] > Game.DIM_X) || (pos[1] < 0) || (pos[1] > Game.DIM_Y);\n    }\n\n    moveObjects(delta) {\n        this.allObjects().forEach( object => {\n            object.move(delta);\n        });\n    }\n\n    randomPositionX() {\n        const startingPositions = [0, Game.DIM_X];\n        return startingPositions[Math.floor(Math.random() * startingPositions.length)];\n    }\n\n    randomPositionY() {\n        return (Math.random() * ((Game.DIM_Y * 0.80) - (Game.DIM_Y * 0.20)) + (Game.DIM_Y * 0.20));\n    }\n\n    remove(object) {\n        if (object instanceof Enemy) {\n            this.enemies.splice(this.enemies.indexOf(object), 1);\n        } else if (object instanceof Powerup) {\n            this.powerups.splice(this.powerups.indexOf(object), 1);\n        } else if (object instanceof Player) {\n            this.player.splice(this.player.indexOf(object), 1);\n        } else if (object instanceof Particle) {\n            this.particles.splice(this.particles.indexOf(object), 1);\n        } else if (object instanceof Notification) {\n            this.notifications.splice(this.notifications.indexOf(object), 1);\n        } else {\n            throw new Error(\"unknown object type\");\n        }\n    }\n\n    step(delta) {\n        this.moveObjects(delta);\n        this.checkCollisions();\n        this.checkNearMisses();\n        if (this.player.length !== 0) {\n            this.player[0].attemptCatch();\n            this.checkRadius();\n        }\n    }\n\n    updateHighScores(score) {\n        let hs1;\n        let hs2;\n        let hs3;\n        let hs4;\n        let hs5;\n\n        if (localStorage.getItem('hs1')) {\n            hs1 = localStorage.getItem('hs1');\n        } else {\n            hs1 = 0;\n        }\n        if (localStorage.getItem('hs2')) {\n            hs2 = localStorage.getItem('hs2');\n        } else {\n            hs2 = 0;\n        }\n        if (localStorage.getItem('hs3')) {\n            hs3 = localStorage.getItem('hs3');\n        } else {\n            hs3 = 0;\n        }\n        if (localStorage.getItem('hs4')) {\n            hs4 = localStorage.getItem('hs4');\n        } else {\n            hs4 = 0;\n        }\n        if (localStorage.getItem('hs5')) {\n            hs5 = localStorage.getItem('hs5');\n        } else {\n            hs5 = 0;\n        }\n\n        let scores = [];\n        scores.push(hs1);\n        scores.push(hs2);\n        scores.push(hs3);\n        scores.push(hs4);\n        scores.push(hs5);\n        scores.push(score.toFixed(0).toString());\n\n        let orderedScores = scores.sort(function(a,b){return a - b}).reverse();\n        scores = [];\n    \n        hs1 = orderedScores[0];\n        hs2 = orderedScores[1];\n        hs3 = orderedScores[2];\n        hs4 = orderedScores[3];\n        hs5 = orderedScores[4];\n        \n        localStorage.setItem('hs5', hs5);\n        localStorage.setItem('hs4', hs4);\n        localStorage.setItem('hs3', hs3);\n        localStorage.setItem('hs2', hs2);\n        localStorage.setItem('hs1', hs1);\n\n        let highScores = document.getElementById('high-scores');\n        highScores.innerHTML = `<li>${hs1}</li><li>${hs2}</li><li>${hs3}</li><li>${hs4}</li><li>${hs5}</li>`;\n    }\n\n}\n\nGame.DIM_X = 1000;\nGame.DIM_Y = 600;\nGame.BG_COLOR = \"#000000\";\nGame.SAFE_ZONE_COLOR = \"#4cedff\";\n\nmodule.exports = Game;\n\n//# sourceURL=webpack:///./src/game.js?");

/***/ }),

/***/ "./src/game_view.js":
/*!**************************!*\
  !*** ./src/game_view.js ***!
  \**************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("class GameView {\n    constructor(game, ctx) {\n        this.ctx = ctx;\n        this.game = game;\n        this.player = this.game.addPlayer();\n    }\n\n    bindKeyHandler() {\n        const player = this.player;\n        key(\"space\", () => { player.launch(); });\n    }\n\n    start() {\n        this.bindKeyHandler();\n        this.lastTime = 0;\n        requestAnimationFrame(this.animate.bind(this));\n    }\n\n    animate(time) {\n        const score = this.game.score;\n        const timeDelta = time - this.lastTime;\n        this.game.step(timeDelta);\n        const newScore = this.game.score;\n        if (newScore - score > 0 && (this.player.safe_bottom === true || this.player.safe_top === true) ) {\n            this.game.ripple = 10;\n        }\n        this.lastTime = time;\n        this.game.draw(this.ctx);\n        requestAnimationFrame(this.animate.bind(this));\n    }\n\n}\n\nmodule.exports = GameView;\n\n//# sourceURL=webpack:///./src/game_view.js?");

/***/ }),

/***/ "./src/index.js":
/*!**********************!*\
  !*** ./src/index.js ***!
  \**********************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("const Game = __webpack_require__(/*! ./game */ \"./src/game.js\");\nconst GameView = __webpack_require__(/*! ./game_view */ \"./src/game_view.js\");\n\nlet npcSpeedMultiplierBool = false;\nlet angledEnemySpawnsBool = false;\nlet playerSpeedMultiplierBool = false;\nlet enemySpawnFrequencyMultiplierBool = false;\nlet enemySpeedRandomBool = false;\n\ndocument.addEventListener('DOMContentLoaded', () => {\n\n    const canvasEl = document.getElementById('canvas');\n    canvasEl.width = Game.DIM_X;\n    canvasEl.height = Game.DIM_Y;\n    const ctx = canvasEl.getContext('2d');\n    ctx.beginPath();\n    ctx.clearRect(0, 0, Game.DIM_X, Game.DIM_Y);\n    ctx.fillStyle = Game.BG_COLOR;\n    ctx.shadowColor = this.color;\n    ctx.shadowBlur = 0;\n    ctx.shadowOffsetX = 0;\n    ctx.shadowOffsetY = 0;\n    ctx.fillRect(0, 0, Game.DIM_X, Game.DIM_Y);\n    ctx.fillStyle = Game.SAFE_ZONE_COLOR;\n    ctx.shadowColor = Game.SAFE_ZONE_COLOR;\n    ctx.shadowBlur = 20;\n    ctx.shadowOffsetX = 0;\n    ctx.shadowOffsetY = 0;\n    ctx.fillRect((Game.DIM_X * 0.49), 0, (Game.DIM_X * 0.02), (Game.DIM_Y * 0.05));\n    ctx.fillRect((Game.DIM_X * 0.49), (Game.DIM_Y * 0.95), (Game.DIM_X * 0.02), (Game.DIM_Y * 0.05));\n    ctx.closePath();\n\n    let fasterNPCs = document.getElementById('faster-npcs');\n    fasterNPCs.onclick = () => {\n        if (npcSpeedMultiplierBool === false) {\n            npcSpeedMultiplierBool = true;\n            fasterNPCs.setAttribute(\"class\", \"multiplier-btn-active\");\n            \n        } else {\n            npcSpeedMultiplierBool = false;\n            fasterNPCs.setAttribute(\"class\", \"multiplier-btn\");\n        }\n        fasterNPCs.blur();\n    }\n\n    let angledEnemySpawns = document.getElementById('angled-enemy-spawns');\n    angledEnemySpawns.onclick = () => {\n        if (angledEnemySpawnsBool === false) {\n            angledEnemySpawnsBool = true;\n            angledEnemySpawns.setAttribute(\"class\", \"multiplier-btn-active\");\n        } else {\n            angledEnemySpawnsBool = false;\n            angledEnemySpawns.setAttribute(\"class\", \"multiplier-btn\");\n        }\n        angledEnemySpawns.blur();\n    }\n\n    let playerSpeedMultiplier = document.getElementById('slow-player');\n    playerSpeedMultiplier.onclick = () => {\n        if (playerSpeedMultiplierBool === false) {\n            playerSpeedMultiplierBool = true;\n            playerSpeedMultiplier.setAttribute(\"class\", \"multiplier-btn-active\");\n        } else {\n            playerSpeedMultiplierBool = false;\n            playerSpeedMultiplier.setAttribute(\"class\", \"multiplier-btn\");\n        }\n        playerSpeedMultiplier.blur();\n    }\n\n    let enemySpawnFrequencyMultiplier = document.getElementById('more-enemies');\n    enemySpawnFrequencyMultiplier.onclick = () => {\n        if (enemySpawnFrequencyMultiplierBool === false) {\n            enemySpawnFrequencyMultiplierBool = true;\n            enemySpawnFrequencyMultiplier.setAttribute(\"class\", \"multiplier-btn-active\");\n        } else {\n            enemySpawnFrequencyMultiplierBool = false;\n            enemySpawnFrequencyMultiplier.setAttribute(\"class\", \"multiplier-btn\");\n        }\n        enemySpawnFrequencyMultiplier.blur();\n    }\n\n    let enemySpeedRandom = document.getElementById('random-enemy-speed');\n    enemySpeedRandom.onclick = () => {\n        if (enemySpeedRandomBool === false) {\n            enemySpeedRandomBool = true;\n            enemySpeedRandom.setAttribute(\"class\", \"multiplier-btn-active\");\n        } else {\n            enemySpeedRandomBool = false;\n            enemySpeedRandom.setAttribute(\"class\", \"multiplier-btn\");\n        }\n        enemySpeedRandom.blur();\n    }\n    \n    let hs1 = window.hs1;\n    let hs2 = window.hs2;\n    let hs3 = window.hs3;\n    let hs4 = window.hs4;\n    let hs5 = window.hs5;\n\n    let highScores = document.getElementById('high-scores');\n    highScores.innerHTML = `<li>${hs1}</li><li>${hs2}</li><li>${hs3}</li><li>${hs4}</li><li>${hs5}</li>`;\n\n    let startGame = document.getElementById('start-game');\n    startGame.onclick = () => {\n        const game = new Game(npcSpeedMultiplierBool, angledEnemySpawnsBool, playerSpeedMultiplierBool, enemySpawnFrequencyMultiplierBool, enemySpeedRandomBool);\n        new GameView(game, ctx).start();\n        startGame.blur();\n    }\n\n    function renderDiagram() {\n        const canvasDiagram = document.getElementById('diagram');\n        canvasDiagram.width = 200;\n        canvasDiagram.height = 600;\n        const ctxDiagram = canvasDiagram.getContext('2d');\n\n        ctxDiagram.clearRect(0, 0, 200, 600);\n        ctxDiagram.fillStyle = \"#000000\";\n        ctxDiagram.beginPath();\n        ctxDiagram.fillRect(0, 0, 200, 600);\n        ctxDiagram.closePath();\n\n        ctxDiagram.beginPath();\n        ctxDiagram.font = \"20px Saira Semi Condensed\";\n        ctxDiagram.fillStyle = \"rgba(204, 204, 204, 1)\";\n        ctxDiagram.textAlign = \"center\";\n        ctxDiagram.textBaseline = \"middle\";\n        ctxDiagram.fillText(\"ENEMIES\", 100, 25);\n        ctxDiagram.closePath();\n\n        ctxDiagram.beginPath();\n        ctxDiagram.fillStyle = \"#000000\";\n        ctxDiagram.strokeStyle = \"#f45942\";\n        ctxDiagram.lineWidth = 5;\n        ctxDiagram.shadowColor = \"#f45942\";\n        ctxDiagram.shadowBlur = 30;\n        ctxDiagram.shadowOffsetX = 0;\n        ctxDiagram.shadowOffsetY = 0;\n        ctxDiagram.arc(100, 75, 20, 0, 2 * Math.PI, true);\n        ctxDiagram.stroke();\n        ctxDiagram.fill();\n        ctxDiagram.closePath();\n\n        ctxDiagram.beginPath();\n        ctxDiagram.fillStyle = \"#000000\";\n        ctxDiagram.strokeStyle = \"#a442f4\";\n        ctxDiagram.lineWidth = 5;\n        ctxDiagram.shadowColor = \"#a442f4\";\n        ctxDiagram.shadowBlur = 30;\n        ctxDiagram.shadowOffsetX = 0;\n        ctxDiagram.shadowOffsetY = 0;\n        ctxDiagram.strokeRect(60, 125, 80, 10);\n        ctxDiagram.fillRect(60, 125, 80, 10);\n        ctxDiagram.closePath();\n\n        ctxDiagram.beginPath();\n        ctxDiagram.fillStyle = \"#000000\";\n        ctxDiagram.strokeStyle = \"#f9e43e\";\n        ctxDiagram.lineWidth = 5;\n        ctxDiagram.shadowColor = \"#f9e43e\";\n        ctxDiagram.shadowBlur = 30;\n        ctxDiagram.shadowOffsetX = 0;\n        ctxDiagram.shadowOffsetY = 0;\n        ctxDiagram.strokeRect(70, 170, 60, 30);\n        ctxDiagram.fillRect(70, 170, 60, 30);\n        ctxDiagram.closePath();\n\n        ctxDiagram.beginPath();\n        ctxDiagram.fillStyle = \"#000000\";\n        ctxDiagram.strokeStyle = \"#fca420\";\n        ctxDiagram.lineWidth = 5;\n        ctxDiagram.shadowColor = \"#fca420\";\n        ctxDiagram.shadowBlur = 30;\n        ctxDiagram.shadowOffsetX = 0;\n        ctxDiagram.shadowOffsetY = 0;\n        ctxDiagram.strokeRect(85, 235, 30, 60);\n        ctxDiagram.fillRect(85, 235, 30, 60);\n        ctxDiagram.closePath();\n\n        ctxDiagram.beginPath();\n        ctxDiagram.fillStyle = \"#000000\";\n        ctxDiagram.strokeStyle = \"#f442e8\";\n        ctxDiagram.lineWidth = 5;\n        ctxDiagram.shadowColor = \"#f442e8\";\n        ctxDiagram.shadowBlur = 30;\n        ctxDiagram.shadowOffsetX = 0;\n        ctxDiagram.shadowOffsetY = 0;\n        ctxDiagram.strokeRect(85, 330, 30, 30);\n        ctxDiagram.fillRect(85, 330, 30, 30);\n        ctxDiagram.closePath();\n\n        ctxDiagram.beginPath();\n        ctxDiagram.font = \"20px Saira Semi Condensed\";\n        ctxDiagram.fillStyle = \"rgba(204, 204, 204, 1)\";\n        ctxDiagram.textAlign = \"center\";\n        ctxDiagram.textBaseline = \"middle\";\n        ctxDiagram.shadowBlur = 0;\n        ctxDiagram.fillText(\"POWERUPS\", 100, 405);\n        ctxDiagram.closePath();\n\n        ctxDiagram.beginPath();\n        ctxDiagram.fillStyle = \"#000000\";\n        ctxDiagram.strokeStyle = \"#48f442\";\n        ctxDiagram.lineWidth = 5;\n        ctxDiagram.shadowColor = \"#48f442\";\n        ctxDiagram.shadowBlur = 30;\n        ctxDiagram.shadowOffsetX = 0;\n        ctxDiagram.shadowOffsetY = 0;\n        ctxDiagram.arc(35, 450, 12, 0, 2 * Math.PI, true);\n        ctxDiagram.stroke();\n        ctxDiagram.fill();\n        ctxDiagram.closePath();\n        ctxDiagram.beginPath();\n        ctxDiagram.font = \"20px Saira Semi Condensed\";\n        ctxDiagram.fillStyle = \"white\";\n        ctxDiagram.textAlign = \"center\";\n        ctxDiagram.textBaseline = \"middle\";\n        ctxDiagram.fillText('S', 35, 453);\n        ctxDiagram.closePath();\n\n        ctxDiagram.beginPath();\n        ctxDiagram.font = \"16px Saira Semi Condensed\";\n        ctxDiagram.fillStyle = \"rgba(204, 204, 204, 0.75)\";\n        ctxDiagram.textAlign = \"center\";\n        ctxDiagram.textBaseline = \"middle\";\n        ctxDiagram.shadowBlur = 0;\n        ctxDiagram.fillText(\"SLOW TIME\", 125, 450);\n        ctxDiagram.closePath();\n\n        ctxDiagram.beginPath();\n        ctxDiagram.fillStyle = \"#000000\";\n        ctxDiagram.strokeStyle = \"#48f442\";\n        ctxDiagram.lineWidth = 5;\n        ctxDiagram.shadowColor = \"#48f442\";\n        ctxDiagram.shadowBlur = 30;\n        ctxDiagram.shadowOffsetX = 0;\n        ctxDiagram.shadowOffsetY = 0;\n        ctxDiagram.arc(35, 485, 12, 0, 2 * Math.PI, true);\n        ctxDiagram.stroke();\n        ctxDiagram.fill();\n        ctxDiagram.closePath();\n        ctxDiagram.beginPath();\n        ctxDiagram.font = \"20px Saira Semi Condensed\";\n        ctxDiagram.fillStyle = \"white\";\n        ctxDiagram.textAlign = \"center\";\n        ctxDiagram.textBaseline = \"middle\";\n        ctxDiagram.fillText('!', 35, 488);\n        ctxDiagram.closePath();\n\n        ctxDiagram.beginPath();\n        ctxDiagram.font = \"16px Saira Semi Condensed\";\n        ctxDiagram.fillStyle = \"rgba(204, 204, 204, 0.75)\";\n        ctxDiagram.textAlign = \"center\";\n        ctxDiagram.textBaseline = \"middle\";\n        ctxDiagram.shadowBlur = 0;\n        ctxDiagram.fillText(\"INVINCIBLE\", 125, 485);\n        ctxDiagram.closePath();\n\n        ctxDiagram.beginPath();\n        ctxDiagram.fillStyle = \"#000000\";\n        ctxDiagram.strokeStyle = \"#48f442\";\n        ctxDiagram.lineWidth = 5;\n        ctxDiagram.shadowColor = \"#48f442\";\n        ctxDiagram.shadowBlur = 30;\n        ctxDiagram.shadowOffsetX = 0;\n        ctxDiagram.shadowOffsetY = 0;\n        ctxDiagram.arc(35, 520, 12, 0, 2 * Math.PI, true);\n        ctxDiagram.stroke();\n        ctxDiagram.fill();\n        ctxDiagram.closePath();\n        ctxDiagram.beginPath();\n        ctxDiagram.font = \"24px Saira Semi Condensed\";\n        ctxDiagram.fillStyle = \"white\";\n        ctxDiagram.textAlign = \"center\";\n        ctxDiagram.textBaseline = \"middle\";\n        ctxDiagram.fillText('+', 35, 521);\n        ctxDiagram.closePath();\n\n        ctxDiagram.beginPath();\n        ctxDiagram.font = \"16px Saira Semi Condensed\";\n        ctxDiagram.fillStyle = \"rgba(204, 204, 204, 0.75)\";\n        ctxDiagram.textAlign = \"center\";\n        ctxDiagram.textBaseline = \"middle\";\n        ctxDiagram.shadowBlur = 0;\n        ctxDiagram.fillText(\"SCORE PLUS\", 125, 520);\n        ctxDiagram.closePath();\n\n        ctxDiagram.beginPath();\n        ctxDiagram.fillStyle = \"#000000\";\n        ctxDiagram.strokeStyle = \"#48f442\";\n        ctxDiagram.lineWidth = 5;\n        ctxDiagram.shadowColor = \"#48f442\";\n        ctxDiagram.shadowBlur = 30;\n        ctxDiagram.shadowOffsetX = 0;\n        ctxDiagram.shadowOffsetY = 0;\n        ctxDiagram.arc(35, 555, 12, 0, 2 * Math.PI, true);\n        ctxDiagram.stroke();\n        ctxDiagram.fill();\n        ctxDiagram.closePath();\n        ctxDiagram.beginPath();\n        ctxDiagram.font = \"20px Saira Semi Condensed\";\n        ctxDiagram.fillStyle = \"white\";\n        ctxDiagram.textAlign = \"center\";\n        ctxDiagram.textBaseline = \"middle\";\n        ctxDiagram.fillText('X', 35, 558);\n        ctxDiagram.closePath();\n\n        ctxDiagram.beginPath();\n        ctxDiagram.font = \"16px Saira Semi Condensed\";\n        ctxDiagram.fillStyle = \"rgba(204, 204, 204, 0.75)\";\n        ctxDiagram.textAlign = \"center\";\n        ctxDiagram.textBaseline = \"middle\";\n        ctxDiagram.shadowBlur = 0;\n        ctxDiagram.fillText(\"CLEAR SCREEN\", 125, 555);\n        ctxDiagram.closePath();\n    }\n\n    document.fonts.load('10pt \"Saira Semi Condensed\"').then(renderDiagram);\n\n});\n\n//# sourceURL=webpack:///./src/index.js?");

/***/ }),

/***/ "./src/moving_object.js":
/*!******************************!*\
  !*** ./src/moving_object.js ***!
  \******************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("const Util = __webpack_require__(/*! ./util */ \"./src/util.js\");\n\nclass MovingObject {\n    constructor(options) {\n        this.game = options.game;\n        this.pos = options.pos;\n        this.radius = options.radius;\n        this.length = options.length;\n        this.width = options.width;\n        this.color = options.color;\n        if (this.game.angledEnemySpawns === true &&\n            !(this.constructor.name === \"Player\" ||\n                this.constructor.name === \"Notification\" ||\n                this.constructor.name === \"PowerupBulletTime\" ||\n                this.constructor.name === \"PowerupInvincibility\" ||\n                this.constructor.name === \"PowerupPlusScore\" ||\n                this.constructor.name === \"PowerupWipeout\")) {\n            let yVectorsArray = [1, 0.75, 0.5, 0.25, 0, -0.25, -0.5, -0.75, -1];\n            let vectorY = yVectorsArray[Math.floor(Math.random() * yVectorsArray.length)];\n            options.vel[1] += vectorY;\n        }\n        if (this.game.enemySpeedRandom === true &&\n            !(this.constructor.name === \"Player\" ||\n                this.constructor.name === \"Notification\" ||\n                this.constructor.name === \"PowerupBulletTime\" ||\n                this.constructor.name === \"PowerupInvincibility\" ||\n                this.constructor.name === \"PowerupPlusScore\" ||\n                this.constructor.name === \"PowerupWipeout\")) {\n            let vectorsArray = [1.5, 1, 0.5, 0, -0.5, -1, -1.5];\n            let vectorX = vectorsArray[Math.floor(Math.random() * vectorsArray.length)];\n            let vectorY = vectorsArray[Math.floor(Math.random() * vectorsArray.length)];\n            options.vel[0] += vectorX;\n            options.vel[1] += vectorY;\n        }\n\n        if (!(this.constructor.name === \"Player\" ||\n                this.constructor.name === \"Notification\" ||\n                this.constructor.name === \"PowerupBulletTime\" ||\n                this.constructor.name === \"PowerupInvincibility\" ||\n                this.constructor.name === \"PowerupPlusScore\" ||\n                this.constructor.name === \"PowerupWipeout\")) {\n            this.vel = [(options.vel[0] * this.game.npcSpeedMultiplier * this.game.npcSpeedMultiplier2), (options.vel[1] * this.game.npcSpeedMultiplier * this.game.npcSpeedMultiplier2)];\n        } else {\n            this.vel = [(options.vel[0] * this.game.npcSpeedMultiplier2), (options.vel[1] * this.game.npcSpeedMultiplier2)];\n        }\n    }\n\n    hasNearlyMissed(otherObject) {\n        if (otherObject.constructor.name === \"EnemyCircle\") {\n            if (otherObject.vel[0] < 0) { // enemy coming from the right, moving left\n                if ((Util.dist(this.pos, otherObject.pos) < (this.radius + otherObject.radius + 10)) && ((this.vel[1] < 0) && (this.pos[1] + this.radius) < (otherObject.pos[1] - otherObject.radius)) && (this.pos[0] < otherObject.pos[0])) {\n                    return true;\n                }\n                if ((Util.dist(this.pos, otherObject.pos) < (this.radius + otherObject.radius + 25)) && ((this.vel[1] < 0) && (this.pos[1] + this.radius) < (otherObject.pos[1] + otherObject.radius)) && (this.pos[0] > otherObject.pos[0])) {\n                    return true;\n                }\n                if ((Util.dist(this.pos, otherObject.pos) < (this.radius + otherObject.radius + 25)) && ((this.vel[1] > 0) && (this.pos[1] - this.radius) > (otherObject.pos[1] - otherObject.radius)) && (this.pos[0] > otherObject.pos[0])) {\n                    return true;\n                }\n                if ((Util.dist(this.pos, otherObject.pos) < (this.radius + otherObject.radius + 10)) && ((this.vel[1] > 0) && (this.pos[1] - this.radius) > (otherObject.pos[1] + otherObject.radius)) && (this.pos[0] < otherObject.pos[0])) {\n                    return true;\n                }\n            } else {\n                if ((Util.dist(this.pos, otherObject.pos) < (this.radius + otherObject.radius + 25)) && ((this.vel[1] < 0) && (this.pos[1] + this.radius) < (otherObject.pos[1] + otherObject.radius)) && (this.pos[0] < otherObject.pos[0])) {\n                    return true;\n                }\n                if ((Util.dist(this.pos, otherObject.pos) < (this.radius + otherObject.radius + 10)) && ((this.vel[1] < 0) && (this.pos[1] + this.radius) < (otherObject.pos[1] - otherObject.radius)) && (this.pos[0] > otherObject.pos[0])) {\n                    return true;\n                }\n                if ((Util.dist(this.pos, otherObject.pos) < (this.radius + otherObject.radius + 10)) && ((this.vel[1] > 0) && (this.pos[1] - this.radius) > (otherObject.pos[1] + otherObject.radius)) && (this.pos[0] > otherObject.pos[0])) {\n                    return true;\n                }\n                if ((Util.dist(this.pos, otherObject.pos) < (this.radius + otherObject.radius + 25)) && ((this.vel[1] > 0) && (this.pos[1] - this.radius) > (otherObject.pos[1] - otherObject.radius)) && (this.pos[0] < otherObject.pos[0])) {\n                    return true;\n                }\n            }\n        }\n        if (otherObject.constructor.name === \"EnemyLine\" ||\n            otherObject.constructor.name === \"EnemyRectangleHorizontal\" ||\n            otherObject.constructor.name === \"EnemyRectangleVertical\" ||\n            otherObject.constructor.name === \"EnemySquare\") {\n            let DeltaX = this.pos[0] - Math.max(otherObject.pos[0] - (otherObject.width / 2), Math.min(this.pos[0], (otherObject.pos[0] + (otherObject.width / 2))));\n            let DeltaY = this.pos[1] - Math.max(otherObject.pos[1] - (otherObject.length / 2), Math.min(this.pos[1], (otherObject.pos[1] + (otherObject.length / 2))));\n            if (otherObject.vel[0] < 0) { // enemy coming from the right, moving left\n                if (((DeltaX * DeltaX + DeltaY * DeltaY) < (((this.radius + 14) * (this.radius + 14)))) && ((this.vel[1] < 0) && (this.pos[1] + this.radius) < (otherObject.pos[1] - (otherObject.length / 2))) && (this.pos[0] < otherObject.pos[0])) {\n                    // you're heading up, your bottom is above their top, they're on your right = FRONT EDGE NEAR MISS\n                    return true;\n                }\n                if (((DeltaX * DeltaX + DeltaY * DeltaY) < (((this.radius + 30) * (this.radius + 30)))) && ((this.vel[1] < 0) && (this.pos[1] + this.radius) < (otherObject.pos[1] + (otherObject.length / 2))) && (this.pos[0] > otherObject.pos[0])) {\n                    // you're heading up, your bottom is above their bottom, they're on your left = BACK EDGE NEAR MISS\n                    return true;\n                }\n                if (((DeltaX * DeltaX + DeltaY * DeltaY) < (((this.radius + 30) * (this.radius + 30)))) && ((this.vel[1] > 0) && (this.pos[1] - this.radius) > (otherObject.pos[1] - (otherObject.length / 2))) && (this.pos[0] > otherObject.pos[0])) {\n                    // you're heading down, your top is below their top, they're on your left = BACK EDGE NEAR MISS\n                    return true;\n                }\n                if (((DeltaX * DeltaX + DeltaY * DeltaY) < (((this.radius + 14) * (this.radius + 14)))) && ((this.vel[1] > 0) && (this.pos[1] - this.radius) > (otherObject.pos[1] + (otherObject.length / 2))) && (this.pos[0] < otherObject.pos[0])) {\n                    // you're heading down, your top is below their bottom, they're on your right = FRONT EDGE NEAR MISS\n                    return true;\n                }\n            } else { // enemy coming from the left, moving right\n                if (((DeltaX * DeltaX + DeltaY * DeltaY) < (((this.radius + 30) * (this.radius + 30)))) && ((this.vel[1] < 0) && (this.pos[1] + this.radius) < (otherObject.pos[1] + (otherObject.length / 2))) && (this.pos[0] < otherObject.pos[0])) {\n                    // you're heading up, your bottom is above their bottom, they're on your right = BACK EDGE NEAR MISS\n                    return true;\n                }\n                if (((DeltaX * DeltaX + DeltaY * DeltaY) < (((this.radius + 14) * (this.radius + 14)))) && ((this.vel[1] < 0) && (this.pos[1] + this.radius) < (otherObject.pos[1] - (otherObject.length / 2))) && (this.pos[0] > otherObject.pos[0])) {\n                    // you're heading up, your bottom is above their top, they're on your left = FRONT EDGE NEAR MISS\n                    return true;\n                }\n                if (((DeltaX * DeltaX + DeltaY * DeltaY) < (((this.radius + 14) * (this.radius + 14)))) && ((this.vel[1] > 0) && (this.pos[1] - this.radius) > (otherObject.pos[1] + (otherObject.length / 2))) && (this.pos[0] > otherObject.pos[0])) {\n                    // you're heading down, your top is below their bottom, they're on your left = FRONT EDGE NEAR MISS\n                    return true;\n                }\n                if (((DeltaX * DeltaX + DeltaY * DeltaY) < (((this.radius + 30) * (this.radius + 30)))) && ((this.vel[1] > 0) && (this.pos[1] - this.radius) > (otherObject.pos[1] - (otherObject.length / 2))) && (this.pos[0] < otherObject.pos[0])) {\n                    // you're heading down, your top is below their top, they're on your right = BACK EDGE NEAR MISS\n                    return true;\n                }\n            }\n\n            ////// need to tinker with these values, since it works well for some elements and not so great for others\n        }\n    }\n\n    isCollidedWith(otherObject) {\n        if (otherObject.constructor.name === \"EnemyCircle\" ||\n            otherObject.constructor.name === \"PowerupBulletTime\" ||\n            otherObject.constructor.name === \"PowerupInvincibility\" ||\n            otherObject.constructor.name === \"PowerupPlusScore\" ||\n            otherObject.constructor.name === \"PowerupWipeout\") {\n                const centerDist = Util.dist(this.pos, otherObject.pos);\n                return centerDist < (this.radius + otherObject.radius);\n        }\n        if (otherObject.constructor.name === \"EnemyLine\" ||\n            otherObject.constructor.name === \"EnemyRectangleHorizontal\" ||\n            otherObject.constructor.name === \"EnemyRectangleVertical\" ||\n            otherObject.constructor.name === \"EnemySquare\") {\n                let DeltaX = this.pos[0] - Math.max(otherObject.pos[0] - (otherObject.width / 2), Math.min(this.pos[0], (otherObject.pos[0] + (otherObject.width / 2))));\n                let DeltaY = this.pos[1] - Math.max(otherObject.pos[1] - (otherObject.length / 2), Math.min(this.pos[1], (otherObject.pos[1] + (otherObject.length / 2))));\n                return (DeltaX * DeltaX + DeltaY * DeltaY) < (this.radius * this.radius);\n                // this formula for collision between a circle and a regular polygon inspired by the article here: https://yal.cc/rectangle-circle-intersection-test/\n        }\n    }\n\n    move() {\n        this.pos = [this.pos[0] + this.vel[0], this.pos[1] + this.vel[1]];\n        \n        if (this.game.isOutOfBounds(this.pos)) {\n            this.remove();\n        }\n    }\n\n    remove() {\n        this.game.remove(this);\n    }\n\n    explode() {\n        this.game.explode(this);\n    }\n\n}\n\nmodule.exports = MovingObject;\n\n//# sourceURL=webpack:///./src/moving_object.js?");

/***/ }),

/***/ "./src/notification.js":
/*!*****************************!*\
  !*** ./src/notification.js ***!
  \*****************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("const MovingObject = __webpack_require__(/*! ./moving_object */ \"./src/moving_object.js\");\n\nclass Notification extends MovingObject {\n    constructor(options) {\n        options.pos = options.pos;\n        options.vel = options.vel || [0.5, -0.5];\n        options.color = \"#FFFFFF\";\n        super(options);\n        this.message = options.message;\n    }\n\n    draw(ctx) {\n        ctx.beginPath();\n        ctx.font = \"14px Saira Semi Condensed\";\n        ctx.fillStyle = this.color;\n        ctx.textAlign = \"center\";\n        ctx.textBaseline = \"middle\";\n        ctx.fillText(`${this.message}`, this.pos[0], this.pos[1]);\n        ctx.closePath();\n    }\n    \n}\n\nmodule.exports = Notification;\n\n//# sourceURL=webpack:///./src/notification.js?");

/***/ }),

/***/ "./src/particle.js":
/*!*************************!*\
  !*** ./src/particle.js ***!
  \*************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("const MovingObject = __webpack_require__(/*! ./moving_object */ \"./src/moving_object.js\");\n\nclass Particle extends MovingObject {\n    constructor(options) {\n        options.pos = options.pos;\n        options.vel = options.vel;\n        options.radius = 2;\n        options.color = options.color;\n        super(options);\n    }\n\n    draw(ctx) {\n        ctx.fillStyle = this.color;\n        ctx.beginPath();\n        ctx.arc(this.pos[0], this.pos[1], this.radius, 0, 2 * Math.PI, true);\n        ctx.fill();\n        ctx.closePath();\n    }\n    \n}\n\nmodule.exports = Particle;\n\n//# sourceURL=webpack:///./src/particle.js?");

/***/ }),

/***/ "./src/player.js":
/*!***********************!*\
  !*** ./src/player.js ***!
  \***********************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("const MovingObject = __webpack_require__(/*! ./moving_object */ \"./src/moving_object.js\");\nconst Enemy = __webpack_require__(/*! ./enemy */ \"./src/enemy.js\");\nconst PowerupBulletTime = __webpack_require__(/*! ./powerup_bullet_time */ \"./src/powerup_bullet_time.js\");\nconst PowerupInvincibility = __webpack_require__(/*! ./powerup_invincibility */ \"./src/powerup_invincibility.js\");\nconst PowerupPlusScore = __webpack_require__(/*! ./powerup_plus_score */ \"./src/powerup_plus_score.js\");\nconst PowerupWipeout = __webpack_require__(/*! ./powerup_wipeout */ \"./src/powerup_wipeout.js\");\nconst Notification = __webpack_require__(/*! ./notification */ \"./src/notification.js\");\n\nclass Player extends MovingObject {\n    constructor(options) {\n        options.radius = options.radius || 12; // 27 means explode\n        options.vel = [0, 0];\n        options.color = \"#FFFFFF\";\n        options.pos = options.pos || [500, 570];\n        super(options);\n        this.safe_bottom = true;\n        this.safe_top = false;\n        this.invincible = false;\n    }\n\n    vulnerable() {  \n        if (this.safe_bottom === false && this.safe_top === false) {\n            return true;\n        }\n    }\n\n    launch() {\n        if (this.safe_bottom) {\n            this.radius = 12;\n            this.vel = [0, (-10 * this.game.playerSpeedMultiplier)];\n            this.safe_bottom = false;\n        } else if (this.safe_top) {\n            this.radius = 12;\n            this.vel = [0, (10 * this.game.playerSpeedMultiplier)];\n            this.safe_top = false;\n        } else {\n            return;\n        }\n    }\n\n    attemptCatch() {\n        if (this.vulnerable() && this.pos[1] >= 570) {\n            this.vel = [0, 0];\n            this.pos = [500, 570];\n            this.safe_bottom = true;\n            this.game.score += 10 * this.game.totalScoreMultiplier;\n\n            if (localStorage.getItem('hs1')) {\n                hs1 = localStorage.getItem('hs1');\n            } else {\n                hs1 = 0;\n            }\n\n            if (this.game.score > hs1 && this.game.highScoreSet === false) {\n                this.game.highScoreSet = true;\n                this.game.notifications.push(new Notification({\n                    message: \"NEW HIGH SCORE!!!\",\n                    pos: [500, 200],\n                    vel: [0, -0.25],\n                    game: this.game,\n                }));\n                setTimeout(() => {\n                    this.game.notifications = [];\n                }, 750);\n            }\n            \n        } else if (this.vulnerable() && this.pos[1] <= 30) {\n            this.vel = [0, 0];\n            this.pos = [500, 30];\n            this.safe_top = true;\n            this.game.score += 10 * this.game.totalScoreMultiplier;\n\n            if (localStorage.getItem('hs1')) {\n                hs1 = localStorage.getItem('hs1');\n            } else {\n                hs1 = 0;\n            }\n\n            if (this.game.score > hs1 && this.game.highScoreSet === false) {\n                this.game.highScoreSet = true;\n                this.game.notifications.push(new Notification({\n                    message: \"NEW HIGH SCORE!!!\",\n                    pos: [500, 200],\n                    vel: [0, -0.25],\n                    game: this.game,\n                }));\n                setTimeout(() => {\n                    this.game.notifications = [];\n                }, 750);\n            }\n\n        } else {\n            return;\n        }\n    }\n\n    growPlayer() {\n        if (this.safe_bottom === true || this.safe_top === true) {\n            setInterval( () => {\n                this.radius += 1\n            }, 533);\n        }\n    }\n\n    collideWith(otherObject) {\n        if (otherObject instanceof Enemy && this.vulnerable() === true && this.invincible === false) {\n            this.remove();\n            this.explode();\n            this.game.enemies.forEach(enemy => {\n                enemy.explode();\n            })\n            this.game.enemies = [];\n            setTimeout( () => {\n                this.game.playing = false;\n                this.game.updateHighScores(this.game.score);\n            }, 1500);\n            return true;\n        }\n\n        if (otherObject instanceof Enemy && this.vulnerable() === true && this.invincible === true) {\n            otherObject.remove();\n            otherObject.explode();\n            this.game.score += 10 * this.game.totalScoreMultiplier;\n\n            if (localStorage.getItem('hs1')) {\n                hs1 = localStorage.getItem('hs1');\n            } else {\n                hs1 = 0;\n            }\n\n            if (this.game.score > hs1 && this.game.highScoreSet === false) {\n                this.game.highScoreSet = true;\n                this.game.notifications.push(new Notification({\n                    message: \"NEW HIGH SCORE!!!\",\n                    pos: [500, 200],\n                    vel: [0, -0.25],\n                    game: this.game,\n                }));\n                setTimeout(() => {\n                    this.game.notifications = [];\n                }, 750);\n            }\n            \n            return true;\n        }\n\n        if (otherObject instanceof PowerupBulletTime && this.vulnerable() === true) {\n            this.game.npcSpeedMultiplier2 = 0.4;\n            let revert = (1 / this.game.npcSpeedMultiplier2);\n            this.game.enemies.forEach( enemy => {\n                enemy.vel[0] = enemy.vel[0] * this.game.npcSpeedMultiplier2;\n                enemy.vel[1] = enemy.vel[1] * this.game.npcSpeedMultiplier2;\n            })\n            this.game.powerups.forEach( powerup => {\n                powerup.vel[0] = powerup.vel[0] * this.game.npcSpeedMultiplier2;\n                powerup.vel[1] = powerup.vel[1] * this.game.npcSpeedMultiplier2;\n            })\n            setTimeout(() => {\n                this.game.npcSpeedMultiplier2 = 1;\n                this.game.enemies.forEach(enemy => {\n                    enemy.vel[0] = enemy.vel[0] * revert;\n                    enemy.vel[1] = enemy.vel[1] * revert;\n                })\n                this.game.powerups.forEach(powerup => {\n                    powerup.vel[0] = powerup.vel[0] * revert;\n                    powerup.vel[1] = powerup.vel[1] * revert;\n                })\n            }, 6 * 1000);\n\n            otherObject.remove();\n            otherObject.explode();\n            return true;\n        }\n\n        \n        if (otherObject instanceof PowerupInvincibility && this.vulnerable() === true) {\n            this.invincible = true;\n            this.color = \"#237dfc\";\n            this.vel[1] *= 1.5;\n            this.game.playerSpeedMultiplier *= 1.5;\n            setTimeout(() => {\n                this.invincible = false;\n                this.color = \"rgba(255, 255, 255, 1)\";\n                this.vel[1] /= 1.5;\n                this.game.playerSpeedMultiplier /= 1.5;\n            }, 6 * 1000);\n            otherObject.remove();\n            otherObject.explode();\n            return true;\n        }\n\n        if (otherObject instanceof PowerupPlusScore && this.vulnerable() === true) {\n            this.game.score += 10 * this.game.totalScoreMultiplier;\n\n            if (localStorage.getItem('hs1')) {\n                hs1 = localStorage.getItem('hs1');\n            } else {\n                hs1 = 0;\n            }\n\n            if (this.game.score > hs1 && this.game.highScoreSet === false) {\n                this.game.highScoreSet = true;\n                this.game.notifications.push(new Notification({\n                    message: \"NEW HIGH SCORE!!!\",\n                    pos: [500, 200],\n                    vel: [0, -0.25],\n                    game: this.game,\n                }));\n                setTimeout(() => {\n                    this.game.notifications = [];\n                }, 750);\n            }\n            \n            otherObject.remove();\n            otherObject.explode();\n            return true;\n        }\n\n        if (otherObject instanceof PowerupWipeout && this.vulnerable() === true) {\n            otherObject.remove();\n            otherObject.explode();\n            this.game.score += 10 * this.game.totalScoreMultiplier * this.game.enemies.length;\n\n            if (localStorage.getItem('hs1')) {\n                hs1 = localStorage.getItem('hs1');\n            } else {\n                hs1 = 0;\n            }\n\n            if (this.game.score > hs1 && this.game.highScoreSet === false) {\n                this.game.highScoreSet = true;\n                this.game.notifications.push(new Notification({\n                    message: \"NEW HIGH SCORE!!!\",\n                    pos: [500, 200],\n                    vel: [0, -0.25],\n                    game: this.game,\n                }));\n                setTimeout(() => {\n                    this.game.notifications = [];\n                }, 750);\n            }\n            \n            this.game.enemies.forEach(enemy => {\n                enemy.explode();\n            })\n            \n            this.game.enemies = [];\n            return true;\n        }\n        \n        return false;\n    }\n\n    nearlyMiss(otherObject) {\n        if (this.vulnerable() === true) {\n            otherObject.remove();\n            otherObject.explode();\n            this.game.score += 10 * this.game.totalScoreMultiplier;\n            if (localStorage.getItem('hs1')) {\n                hs1 = localStorage.getItem('hs1');\n            } else {\n                hs1 = 0;\n            }\n            if (this.game.score > hs1 && this.game.highScoreSet === false) {\n                this.game.highScoreSet = true;\n                this.game.notifications.push(new Notification({\n                    message: \"NEW HIGH SCORE!!!\",\n                    pos: [500, 200],\n                    vel: [0, -0.25],\n                    game: this.game,\n                }));\n            }\n            setTimeout(() => {\n                this.game.notifications = [];\n            }, 1000);\n            return true;\n        }\n    }\n\n    draw(ctx) {\n        ctx.beginPath();\n        ctx.fillStyle = \"#000000\";\n        ctx.strokeStyle = this.color;\n        ctx.lineWidth = 5;\n        ctx.shadowColor = this.color;\n        ctx.shadowBlur = 40;\n        ctx.shadowOffsetX = 0;\n        ctx.shadowOffsetY = 0;\n        ctx.arc(this.pos[0], this.pos[1], this.radius, 0, 2 * Math.PI, true);\n        ctx.fill();\n        ctx.stroke();\n        ctx.closePath();\n    }\n    \n}\n\nmodule.exports = Player;\n\n//# sourceURL=webpack:///./src/player.js?");

/***/ }),

/***/ "./src/powerup.js":
/*!************************!*\
  !*** ./src/powerup.js ***!
  \************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("const MovingObject = __webpack_require__(/*! ./moving_object */ \"./src/moving_object.js\");\n\nclass Powerup extends MovingObject {\n    constructor(options) {\n        options.pos = options.pos;\n        options.vel = options.vel;\n        options.radius = options.radius;\n        options.color = options.color;\n        options.speedMultiplier = options.speedMultiplier;\n        super(options);\n    }\n}\n\nmodule.exports = Powerup;\n\n//# sourceURL=webpack:///./src/powerup.js?");

/***/ }),

/***/ "./src/powerup_bullet_time.js":
/*!************************************!*\
  !*** ./src/powerup_bullet_time.js ***!
  \************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("const Powerup = __webpack_require__(/*! ./powerup */ \"./src/powerup.js\");\nconst Util = __webpack_require__(/*! ./util */ \"./src/util.js\");\n\nclass PowerupBulletTime extends Powerup {\n    constructor(options) {\n        options.pos = [options.game.randomPositionX(), options.game.randomPositionY()];\n        options.vel = Util.entranceVelocity(options.pos[0]);\n        options.radius = 12;\n        options.color = \"#48f442\";\n        super(options);\n    }\n\n    draw(ctx) {\n        ctx.fillStyle = \"#000000\";\n        ctx.strokeStyle = this.color;\n        ctx.lineWidth = 5;\n        ctx.shadowColor = this.color;\n        ctx.shadowBlur = 30;\n        ctx.shadowOffsetX = 0;\n        ctx.shadowOffsetY = 0;\n        ctx.beginPath();\n        ctx.arc(this.pos[0], this.pos[1], this.radius, 0, 2 * Math.PI, true);\n        ctx.stroke();\n        ctx.fill();\n        ctx.closePath();\n        ctx.beginPath();\n        ctx.font = \"20px Saira Semi Condensed\";\n        ctx.fillStyle = \"white\";\n        ctx.textAlign = \"center\";\n        ctx.textBaseline = \"middle\";\n        ctx.fillText('S', this.pos[0], this.pos[1] + 2);\n        ctx.closePath();\n    }\n    \n}\n\nmodule.exports = PowerupBulletTime;\n\n//# sourceURL=webpack:///./src/powerup_bullet_time.js?");

/***/ }),

/***/ "./src/powerup_invincibility.js":
/*!**************************************!*\
  !*** ./src/powerup_invincibility.js ***!
  \**************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("const Powerup = __webpack_require__(/*! ./powerup */ \"./src/powerup.js\");\nconst Util = __webpack_require__(/*! ./util */ \"./src/util.js\");\n\nclass PowerupInvincibility extends Powerup {\n    constructor(options) {\n        options.pos = [options.game.randomPositionX(), options.game.randomPositionY()];\n        options.vel = Util.entranceVelocity(options.pos[0]);\n        options.radius = 12;\n        options.color = \"#48f442\";\n        super(options);\n    }\n\n    draw(ctx) {\n        ctx.fillStyle = \"#000000\";\n        ctx.strokeStyle = this.color;\n        ctx.lineWidth = 5;\n        ctx.shadowColor = this.color;\n        ctx.shadowBlur = 30;\n        ctx.shadowOffsetX = 0;\n        ctx.shadowOffsetY = 0;\n        ctx.beginPath();\n        ctx.arc(this.pos[0], this.pos[1], this.radius, 0, 2 * Math.PI, true);\n        ctx.stroke();\n        ctx.fill();\n        ctx.closePath();\n        ctx.beginPath();\n        ctx.font = \"20px Saira Semi Condensed\";\n        ctx.fillStyle = \"white\";\n        ctx.textAlign = \"center\";\n        ctx.textBaseline = \"middle\";\n        ctx.fillText(\"!\", this.pos[0], this.pos[1] + 2);\n        ctx.closePath();\n    }\n    \n}\n\nmodule.exports = PowerupInvincibility;\n\n//# sourceURL=webpack:///./src/powerup_invincibility.js?");

/***/ }),

/***/ "./src/powerup_plus_score.js":
/*!***********************************!*\
  !*** ./src/powerup_plus_score.js ***!
  \***********************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("const Powerup = __webpack_require__(/*! ./powerup */ \"./src/powerup.js\");\nconst Util = __webpack_require__(/*! ./util */ \"./src/util.js\");\n\nclass PowerupPlusScore extends Powerup {\n    constructor(options) {\n        options.pos = [options.game.randomPositionX(), options.game.randomPositionY()];\n        options.vel = Util.entranceVelocity(options.pos[0]);\n        options.radius = 12;\n        options.color = \"#48f442\";\n        super(options);\n    }\n\n    draw(ctx) {\n        ctx.fillStyle = \"#000000\";\n        ctx.strokeStyle = this.color;\n        ctx.lineWidth = 5;\n        ctx.shadowColor = this.color;\n        ctx.shadowBlur = 30;\n        ctx.shadowOffsetX = 0;\n        ctx.shadowOffsetY = 0;\n        ctx.beginPath();\n        ctx.arc(this.pos[0], this.pos[1], this.radius, 0, 2 * Math.PI, true);\n        ctx.stroke();\n        ctx.fill();\n        ctx.closePath();\n        ctx.beginPath();\n        ctx.font = \"24px Saira Semi Condensed\";\n        ctx.fillStyle = \"white\";\n        ctx.textAlign = \"center\";\n        ctx.textBaseline = \"middle\";\n        ctx.fillText(\"+\", this.pos[0], this.pos[1]);\n        ctx.closePath();\n    }\n    \n}\n\nmodule.exports = PowerupPlusScore;\n\n//# sourceURL=webpack:///./src/powerup_plus_score.js?");

/***/ }),

/***/ "./src/powerup_wipeout.js":
/*!********************************!*\
  !*** ./src/powerup_wipeout.js ***!
  \********************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("const Powerup = __webpack_require__(/*! ./powerup */ \"./src/powerup.js\");\nconst Util = __webpack_require__(/*! ./util */ \"./src/util.js\");\n\nclass PowerupWipeout extends Powerup {\n    constructor(options) {\n        options.pos = [options.game.randomPositionX(), options.game.randomPositionY()];\n        options.vel = Util.entranceVelocity(options.pos[0]);\n        options.radius = 12;\n        options.color = \"#48f442\";\n        super(options);\n    }\n\n    draw(ctx) {\n        ctx.fillStyle = \"#000000\";\n        ctx.strokeStyle = this.color;\n        ctx.lineWidth = 5;\n        ctx.shadowColor = this.color;\n        ctx.shadowBlur = 30;\n        ctx.shadowOffsetX = 0;\n        ctx.shadowOffsetY = 0;\n        ctx.beginPath();\n        ctx.arc(this.pos[0], this.pos[1], this.radius, 0, 2 * Math.PI, true);\n        ctx.stroke();\n        ctx.fill();\n        ctx.closePath();\n        ctx.beginPath();\n        ctx.font = \"20px Saira Semi Condensed\";\n        ctx.fillStyle = \"white\";\n        ctx.textAlign = \"center\";\n        ctx.textBaseline = \"middle\";\n        ctx.fillText(\"X\", this.pos[0], this.pos[1] + 2);\n        ctx.closePath();\n    }\n    \n}\n\nmodule.exports = PowerupWipeout;\n\n//# sourceURL=webpack:///./src/powerup_wipeout.js?");

/***/ }),

/***/ "./src/util.js":
/*!*********************!*\
  !*** ./src/util.js ***!
  \*********************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("const Util = {\n\n    dist(pos1, pos2) {\n        return Math.sqrt(Math.pow(pos1[0] - pos2[0], 2) + Math.pow(pos1[1] - pos2[1], 2));\n    },\n\n    entranceVelocity(x) {\n        if (x === 0) {\n            return [5, 0];\n        } else {\n            return [-5, 0];\n        }\n    },\n\n}\n\nmodule.exports = Util;\n\n//# sourceURL=webpack:///./src/util.js?");

/***/ })

/******/ });